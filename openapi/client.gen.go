// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Dist defines model for Dist.
type Dist struct {
	Arch *string `json:"arch,omitempty"`
	Os   *string `json:"os,omitempty"`
}

// ErrorMsg defines model for ErrorMsg.
type ErrorMsg struct {
	// Code A unique error code for the specific type of error
	Code string `json:"code"`

	// Message A human-readable error message describing the error
	Message string `json:"message"`
}

// Arch defines model for Arch.
type Arch = string

// Debug defines model for Debug.
type Debug = bool

// GroupUUID defines model for GroupUUID.
type GroupUUID = openapi_types.UUID

// Gzip defines model for Gzip.
type Gzip = bool

// Lldflags defines model for Lldflags.
type Lldflags = string

// OS defines model for OS.
type OS = string

// ReportAddr defines model for ReportAddr.
type ReportAddr = string

// Static defines model for Static.
type Static = bool

// Transport defines model for Transport.
type Transport = string

// Upx defines model for Upx.
type Upx = bool

// UpxLevel defines model for UpxLevel.
type UpxLevel = int

// Error defines model for Error.
type Error = ErrorMsg

// PostCreatorParams defines parameters for PostCreator.
type PostCreatorParams struct {
	// ReportAddr The URL of the report server.
	ReportAddr ReportAddr `form:"report_addr" json:"report_addr"`

	// Os The operating system of the beacon.
	Os OS `form:"os" json:"os"`

	// Arch The architecture of the beacon.
	Arch Arch `form:"arch" json:"arch"`

	// GroupUuid The UUID of the group.
	GroupUuid *GroupUUID `form:"group_uuid,omitempty" json:"group_uuid,omitempty"`

	// Static Indicates if the beacon is static.
	Static *Static `form:"static,omitempty" json:"static,omitempty"`

	// Upx Indicates if the beacon is compressed using UPX.
	Upx *Upx `form:"upx,omitempty" json:"upx,omitempty"`

	// UpxLevel The compression level used by UPX.
	UpxLevel *UpxLevel `form:"upx_level,omitempty" json:"upx_level,omitempty"`

	// Gzip Indicates if the beacon is compressed using Gzip.
	Gzip *Gzip `form:"gzip,omitempty" json:"gzip,omitempty"`

	// Debug Include debug information in the beacon
	Debug *Debug `form:"debug,omitempty" json:"debug,omitempty"`

	// Lldflags The lldflags used to build the beacon.
	Lldflags *Lldflags `form:"lldflags,omitempty" json:"lldflags,omitempty"`

	// Transport The transport protocol used by the beacon.
	Transport *Transport `form:"transport,omitempty" json:"transport,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostCreator request with any body
	PostCreatorWithBody(ctx context.Context, params *PostCreatorParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCreatorDistlist request
	GetCreatorDistlist(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostCreatorWithBody(ctx context.Context, params *PostCreatorParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreatorRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCreatorDistlist(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreatorDistlistRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostCreatorRequestWithBody generates requests for PostCreator with any type of body
func NewPostCreatorRequestWithBody(server string, params *PostCreatorParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/creator")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "report_addr", runtime.ParamLocationQuery, params.ReportAddr); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os", runtime.ParamLocationQuery, params.Os); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "arch", runtime.ParamLocationQuery, params.Arch); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.GroupUuid != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group_uuid", runtime.ParamLocationQuery, *params.GroupUuid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Static != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "static", runtime.ParamLocationQuery, *params.Static); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Upx != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "upx", runtime.ParamLocationQuery, *params.Upx); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpxLevel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "upx_level", runtime.ParamLocationQuery, *params.UpxLevel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Gzip != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gzip", runtime.ParamLocationQuery, *params.Gzip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Debug != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "debug", runtime.ParamLocationQuery, *params.Debug); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Lldflags != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lldflags", runtime.ParamLocationQuery, *params.Lldflags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Transport != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transport", runtime.ParamLocationQuery, *params.Transport); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCreatorDistlistRequest generates requests for GetCreatorDistlist
func NewGetCreatorDistlistRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/creator/distlist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostCreator request with any body
	PostCreatorWithBodyWithResponse(ctx context.Context, params *PostCreatorParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreatorResponse, error)

	// GetCreatorDistlist request
	GetCreatorDistlistWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCreatorDistlistResponse, error)
}

type PostCreatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorMsg
}

// Status returns HTTPResponse.Status
func (r PostCreatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCreatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreatorDistlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Dist
	JSONDefault  *ErrorMsg
}

// Status returns HTTPResponse.Status
func (r GetCreatorDistlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreatorDistlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostCreatorWithBodyWithResponse request with arbitrary body returning *PostCreatorResponse
func (c *ClientWithResponses) PostCreatorWithBodyWithResponse(ctx context.Context, params *PostCreatorParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreatorResponse, error) {
	rsp, err := c.PostCreatorWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreatorResponse(rsp)
}

// GetCreatorDistlistWithResponse request returning *GetCreatorDistlistResponse
func (c *ClientWithResponses) GetCreatorDistlistWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCreatorDistlistResponse, error) {
	rsp, err := c.GetCreatorDistlist(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreatorDistlistResponse(rsp)
}

// ParsePostCreatorResponse parses an HTTP response from a PostCreatorWithResponse call
func ParsePostCreatorResponse(rsp *http.Response) (*PostCreatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCreatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorMsg
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCreatorDistlistResponse parses an HTTP response from a GetCreatorDistlistWithResponse call
func ParseGetCreatorDistlistResponse(rsp *http.Response) (*GetCreatorDistlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreatorDistlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Dist
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorMsg
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
